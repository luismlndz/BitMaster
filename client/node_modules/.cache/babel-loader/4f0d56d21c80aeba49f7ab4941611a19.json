{"ast":null,"code":"'use strict';\n\nmodule.exports = ruby;\nruby.displayName = 'ruby';\nruby.aliases = ['rb'];\n\nfunction ruby(Prism) {\n  /**\n   * Original by Samuel Flores\n   *\n   * Adds the following new token classes:\n   *      constant, builtin, variable, symbol, regex\n   */\n  ;\n\n  (function (Prism) {\n    Prism.languages.ruby = Prism.languages.extend('clike', {\n      comment: [/#.*/, {\n        pattern: /^=begin\\s[\\s\\S]*?^=end/m,\n        greedy: true\n      }],\n      keyword: /\\b(?:alias|and|BEGIN|begin|break|case|class|def|define_method|defined|do|each|else|elsif|END|end|ensure|false|for|if|in|module|new|next|nil|not|or|protected|private|public|raise|redo|require|rescue|retry|return|self|super|then|throw|true|undef|unless|until|when|while|yield)\\b/\n    });\n    var interpolation = {\n      pattern: /#\\{[^}]+\\}/,\n      inside: {\n        delimiter: {\n          pattern: /^#\\{|\\}$/,\n          alias: 'tag'\n        },\n        rest: Prism.languages.ruby\n      }\n    };\n    delete Prism.languages.ruby.function;\n    Prism.languages.insertBefore('ruby', 'keyword', {\n      regex: [{\n        pattern: /%r([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1[gim]{0,3}/,\n        greedy: true,\n        inside: {\n          interpolation: interpolation\n        }\n      }, {\n        pattern: /%r\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)[gim]{0,3}/,\n        greedy: true,\n        inside: {\n          interpolation: interpolation\n        }\n      }, {\n        // Here we need to specifically allow interpolation\n        pattern: /%r\\{(?:[^#{}\\\\]|#(?:\\{[^}]+\\})?|\\\\[\\s\\S])*\\}[gim]{0,3}/,\n        greedy: true,\n        inside: {\n          interpolation: interpolation\n        }\n      }, {\n        pattern: /%r\\[(?:[^\\[\\]\\\\]|\\\\[\\s\\S])*\\][gim]{0,3}/,\n        greedy: true,\n        inside: {\n          interpolation: interpolation\n        }\n      }, {\n        pattern: /%r<(?:[^<>\\\\]|\\\\[\\s\\S])*>[gim]{0,3}/,\n        greedy: true,\n        inside: {\n          interpolation: interpolation\n        }\n      }, {\n        pattern: /(^|[^/])\\/(?!\\/)(\\[.+?]|\\\\.|[^/\\\\\\r\\n])+\\/[gim]{0,3}(?=\\s*($|[\\r\\n,.;})]))/,\n        lookbehind: true,\n        greedy: true\n      }],\n      variable: /[@$]+[a-zA-Z_]\\w*(?:[?!]|\\b)/,\n      symbol: {\n        pattern: /(^|[^:]):[a-zA-Z_]\\w*(?:[?!]|\\b)/,\n        lookbehind: true\n      },\n      'method-definition': {\n        pattern: /(\\bdef\\s+)[\\w.]+/,\n        lookbehind: true,\n        inside: {\n          function: /\\w+$/,\n          rest: Prism.languages.ruby\n        }\n      }\n    });\n    Prism.languages.insertBefore('ruby', 'number', {\n      builtin: /\\b(?:Array|Bignum|Binding|Class|Continuation|Dir|Exception|FalseClass|File|Stat|Fixnum|Float|Hash|Integer|IO|MatchData|Method|Module|NilClass|Numeric|Object|Proc|Range|Regexp|String|Struct|TMS|Symbol|ThreadGroup|Thread|Time|TrueClass)\\b/,\n      constant: /\\b[A-Z]\\w*(?:[?!]|\\b)/\n    });\n    Prism.languages.ruby.string = [{\n      pattern: /%[qQiIwWxs]?([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/,\n      greedy: true,\n      inside: {\n        interpolation: interpolation\n      }\n    }, {\n      pattern: /%[qQiIwWxs]?\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)/,\n      greedy: true,\n      inside: {\n        interpolation: interpolation\n      }\n    }, {\n      // Here we need to specifically allow interpolation\n      pattern: /%[qQiIwWxs]?\\{(?:[^#{}\\\\]|#(?:\\{[^}]+\\})?|\\\\[\\s\\S])*\\}/,\n      greedy: true,\n      inside: {\n        interpolation: interpolation\n      }\n    }, {\n      pattern: /%[qQiIwWxs]?\\[(?:[^\\[\\]\\\\]|\\\\[\\s\\S])*\\]/,\n      greedy: true,\n      inside: {\n        interpolation: interpolation\n      }\n    }, {\n      pattern: /%[qQiIwWxs]?<(?:[^<>\\\\]|\\\\[\\s\\S])*>/,\n      greedy: true,\n      inside: {\n        interpolation: interpolation\n      }\n    }, {\n      pattern: /(\"|')(?:#\\{[^}]+\\}|\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n      greedy: true,\n      inside: {\n        interpolation: interpolation\n      }\n    }];\n    Prism.languages.rb = Prism.languages.ruby;\n  })(Prism);\n}","map":{"version":3,"sources":["/Users/luismelendez/Desktop/capstone/capstone/client/node_modules/refractor/lang/ruby.js"],"names":["module","exports","ruby","displayName","aliases","Prism","languages","extend","comment","pattern","greedy","keyword","interpolation","inside","delimiter","alias","rest","function","insertBefore","regex","lookbehind","variable","symbol","builtin","constant","string","rb"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiBC,IAAjB;AACAA,IAAI,CAACC,WAAL,GAAmB,MAAnB;AACAD,IAAI,CAACE,OAAL,GAAe,CAAC,IAAD,CAAf;;AACA,SAASF,IAAT,CAAcG,KAAd,EAAqB;AACnB;AACF;AACA;AACA;AACA;AACA;AACE;;AAAC,GAAC,UAASA,KAAT,EAAgB;AAChBA,IAAAA,KAAK,CAACC,SAAN,CAAgBJ,IAAhB,GAAuBG,KAAK,CAACC,SAAN,CAAgBC,MAAhB,CAAuB,OAAvB,EAAgC;AACrDC,MAAAA,OAAO,EAAE,CACP,KADO,EAEP;AACEC,QAAAA,OAAO,EAAE,yBADX;AAEEC,QAAAA,MAAM,EAAE;AAFV,OAFO,CAD4C;AAQrDC,MAAAA,OAAO,EAAE;AAR4C,KAAhC,CAAvB;AAUA,QAAIC,aAAa,GAAG;AAClBH,MAAAA,OAAO,EAAE,YADS;AAElBI,MAAAA,MAAM,EAAE;AACNC,QAAAA,SAAS,EAAE;AACTL,UAAAA,OAAO,EAAE,UADA;AAETM,UAAAA,KAAK,EAAE;AAFE,SADL;AAKNC,QAAAA,IAAI,EAAEX,KAAK,CAACC,SAAN,CAAgBJ;AALhB;AAFU,KAApB;AAUA,WAAOG,KAAK,CAACC,SAAN,CAAgBJ,IAAhB,CAAqBe,QAA5B;AACAZ,IAAAA,KAAK,CAACC,SAAN,CAAgBY,YAAhB,CAA6B,MAA7B,EAAqC,SAArC,EAAgD;AAC9CC,MAAAA,KAAK,EAAE,CACL;AACEV,QAAAA,OAAO,EAAE,8DADX;AAEEC,QAAAA,MAAM,EAAE,IAFV;AAGEG,QAAAA,MAAM,EAAE;AACND,UAAAA,aAAa,EAAEA;AADT;AAHV,OADK,EAQL;AACEH,QAAAA,OAAO,EAAE,uCADX;AAEEC,QAAAA,MAAM,EAAE,IAFV;AAGEG,QAAAA,MAAM,EAAE;AACND,UAAAA,aAAa,EAAEA;AADT;AAHV,OARK,EAeL;AACE;AACAH,QAAAA,OAAO,EAAE,wDAFX;AAGEC,QAAAA,MAAM,EAAE,IAHV;AAIEG,QAAAA,MAAM,EAAE;AACND,UAAAA,aAAa,EAAEA;AADT;AAJV,OAfK,EAuBL;AACEH,QAAAA,OAAO,EAAE,yCADX;AAEEC,QAAAA,MAAM,EAAE,IAFV;AAGEG,QAAAA,MAAM,EAAE;AACND,UAAAA,aAAa,EAAEA;AADT;AAHV,OAvBK,EA8BL;AACEH,QAAAA,OAAO,EAAE,qCADX;AAEEC,QAAAA,MAAM,EAAE,IAFV;AAGEG,QAAAA,MAAM,EAAE;AACND,UAAAA,aAAa,EAAEA;AADT;AAHV,OA9BK,EAqCL;AACEH,QAAAA,OAAO,EAAE,4EADX;AAEEW,QAAAA,UAAU,EAAE,IAFd;AAGEV,QAAAA,MAAM,EAAE;AAHV,OArCK,CADuC;AA4C9CW,MAAAA,QAAQ,EAAE,8BA5CoC;AA6C9CC,MAAAA,MAAM,EAAE;AACNb,QAAAA,OAAO,EAAE,kCADH;AAENW,QAAAA,UAAU,EAAE;AAFN,OA7CsC;AAiD9C,2BAAqB;AACnBX,QAAAA,OAAO,EAAE,kBADU;AAEnBW,QAAAA,UAAU,EAAE,IAFO;AAGnBP,QAAAA,MAAM,EAAE;AACNI,UAAAA,QAAQ,EAAE,MADJ;AAEND,UAAAA,IAAI,EAAEX,KAAK,CAACC,SAAN,CAAgBJ;AAFhB;AAHW;AAjDyB,KAAhD;AA0DAG,IAAAA,KAAK,CAACC,SAAN,CAAgBY,YAAhB,CAA6B,MAA7B,EAAqC,QAArC,EAA+C;AAC7CK,MAAAA,OAAO,EAAE,8OADoC;AAE7CC,MAAAA,QAAQ,EAAE;AAFmC,KAA/C;AAIAnB,IAAAA,KAAK,CAACC,SAAN,CAAgBJ,IAAhB,CAAqBuB,MAArB,GAA8B,CAC5B;AACEhB,MAAAA,OAAO,EAAE,8DADX;AAEEC,MAAAA,MAAM,EAAE,IAFV;AAGEG,MAAAA,MAAM,EAAE;AACND,QAAAA,aAAa,EAAEA;AADT;AAHV,KAD4B,EAQ5B;AACEH,MAAAA,OAAO,EAAE,uCADX;AAEEC,MAAAA,MAAM,EAAE,IAFV;AAGEG,MAAAA,MAAM,EAAE;AACND,QAAAA,aAAa,EAAEA;AADT;AAHV,KAR4B,EAe5B;AACE;AACAH,MAAAA,OAAO,EAAE,wDAFX;AAGEC,MAAAA,MAAM,EAAE,IAHV;AAIEG,MAAAA,MAAM,EAAE;AACND,QAAAA,aAAa,EAAEA;AADT;AAJV,KAf4B,EAuB5B;AACEH,MAAAA,OAAO,EAAE,yCADX;AAEEC,MAAAA,MAAM,EAAE,IAFV;AAGEG,MAAAA,MAAM,EAAE;AACND,QAAAA,aAAa,EAAEA;AADT;AAHV,KAvB4B,EA8B5B;AACEH,MAAAA,OAAO,EAAE,qCADX;AAEEC,MAAAA,MAAM,EAAE,IAFV;AAGEG,MAAAA,MAAM,EAAE;AACND,QAAAA,aAAa,EAAEA;AADT;AAHV,KA9B4B,EAqC5B;AACEH,MAAAA,OAAO,EAAE,0DADX;AAEEC,MAAAA,MAAM,EAAE,IAFV;AAGEG,MAAAA,MAAM,EAAE;AACND,QAAAA,aAAa,EAAEA;AADT;AAHV,KArC4B,CAA9B;AA6CAP,IAAAA,KAAK,CAACC,SAAN,CAAgBoB,EAAhB,GAAqBrB,KAAK,CAACC,SAAN,CAAgBJ,IAArC;AACD,GAlIA,EAkIEG,KAlIF;AAmIF","sourcesContent":["'use strict'\n\nmodule.exports = ruby\nruby.displayName = 'ruby'\nruby.aliases = ['rb']\nfunction ruby(Prism) {\n  /**\n   * Original by Samuel Flores\n   *\n   * Adds the following new token classes:\n   *      constant, builtin, variable, symbol, regex\n   */\n  ;(function(Prism) {\n    Prism.languages.ruby = Prism.languages.extend('clike', {\n      comment: [\n        /#.*/,\n        {\n          pattern: /^=begin\\s[\\s\\S]*?^=end/m,\n          greedy: true\n        }\n      ],\n      keyword: /\\b(?:alias|and|BEGIN|begin|break|case|class|def|define_method|defined|do|each|else|elsif|END|end|ensure|false|for|if|in|module|new|next|nil|not|or|protected|private|public|raise|redo|require|rescue|retry|return|self|super|then|throw|true|undef|unless|until|when|while|yield)\\b/\n    })\n    var interpolation = {\n      pattern: /#\\{[^}]+\\}/,\n      inside: {\n        delimiter: {\n          pattern: /^#\\{|\\}$/,\n          alias: 'tag'\n        },\n        rest: Prism.languages.ruby\n      }\n    }\n    delete Prism.languages.ruby.function\n    Prism.languages.insertBefore('ruby', 'keyword', {\n      regex: [\n        {\n          pattern: /%r([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1[gim]{0,3}/,\n          greedy: true,\n          inside: {\n            interpolation: interpolation\n          }\n        },\n        {\n          pattern: /%r\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)[gim]{0,3}/,\n          greedy: true,\n          inside: {\n            interpolation: interpolation\n          }\n        },\n        {\n          // Here we need to specifically allow interpolation\n          pattern: /%r\\{(?:[^#{}\\\\]|#(?:\\{[^}]+\\})?|\\\\[\\s\\S])*\\}[gim]{0,3}/,\n          greedy: true,\n          inside: {\n            interpolation: interpolation\n          }\n        },\n        {\n          pattern: /%r\\[(?:[^\\[\\]\\\\]|\\\\[\\s\\S])*\\][gim]{0,3}/,\n          greedy: true,\n          inside: {\n            interpolation: interpolation\n          }\n        },\n        {\n          pattern: /%r<(?:[^<>\\\\]|\\\\[\\s\\S])*>[gim]{0,3}/,\n          greedy: true,\n          inside: {\n            interpolation: interpolation\n          }\n        },\n        {\n          pattern: /(^|[^/])\\/(?!\\/)(\\[.+?]|\\\\.|[^/\\\\\\r\\n])+\\/[gim]{0,3}(?=\\s*($|[\\r\\n,.;})]))/,\n          lookbehind: true,\n          greedy: true\n        }\n      ],\n      variable: /[@$]+[a-zA-Z_]\\w*(?:[?!]|\\b)/,\n      symbol: {\n        pattern: /(^|[^:]):[a-zA-Z_]\\w*(?:[?!]|\\b)/,\n        lookbehind: true\n      },\n      'method-definition': {\n        pattern: /(\\bdef\\s+)[\\w.]+/,\n        lookbehind: true,\n        inside: {\n          function: /\\w+$/,\n          rest: Prism.languages.ruby\n        }\n      }\n    })\n    Prism.languages.insertBefore('ruby', 'number', {\n      builtin: /\\b(?:Array|Bignum|Binding|Class|Continuation|Dir|Exception|FalseClass|File|Stat|Fixnum|Float|Hash|Integer|IO|MatchData|Method|Module|NilClass|Numeric|Object|Proc|Range|Regexp|String|Struct|TMS|Symbol|ThreadGroup|Thread|Time|TrueClass)\\b/,\n      constant: /\\b[A-Z]\\w*(?:[?!]|\\b)/\n    })\n    Prism.languages.ruby.string = [\n      {\n        pattern: /%[qQiIwWxs]?([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/,\n        greedy: true,\n        inside: {\n          interpolation: interpolation\n        }\n      },\n      {\n        pattern: /%[qQiIwWxs]?\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)/,\n        greedy: true,\n        inside: {\n          interpolation: interpolation\n        }\n      },\n      {\n        // Here we need to specifically allow interpolation\n        pattern: /%[qQiIwWxs]?\\{(?:[^#{}\\\\]|#(?:\\{[^}]+\\})?|\\\\[\\s\\S])*\\}/,\n        greedy: true,\n        inside: {\n          interpolation: interpolation\n        }\n      },\n      {\n        pattern: /%[qQiIwWxs]?\\[(?:[^\\[\\]\\\\]|\\\\[\\s\\S])*\\]/,\n        greedy: true,\n        inside: {\n          interpolation: interpolation\n        }\n      },\n      {\n        pattern: /%[qQiIwWxs]?<(?:[^<>\\\\]|\\\\[\\s\\S])*>/,\n        greedy: true,\n        inside: {\n          interpolation: interpolation\n        }\n      },\n      {\n        pattern: /(\"|')(?:#\\{[^}]+\\}|\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n        greedy: true,\n        inside: {\n          interpolation: interpolation\n        }\n      }\n    ]\n    Prism.languages.rb = Prism.languages.ruby\n  })(Prism)\n}\n"]},"metadata":{},"sourceType":"script"}