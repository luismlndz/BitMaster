{"ast":null,"code":"'use strict';\n\nvar refractorMarkupTemplating = require('./markup-templating.js');\n\nmodule.exports = php;\nphp.displayName = 'php';\nphp.aliases = [];\n\nfunction php(Prism) {\n  Prism.register(refractorMarkupTemplating)\n  /**\n   * Original by Aaron Harun: http://aahacreative.com/2012/07/31/php-syntax-highlighting-prism/\n   * Modified by Miles Johnson: http://milesj.me\n   *\n   * Supports the following:\n   *      - Extends clike syntax\n   *      - Support for PHP 5.3+ (namespaces, traits, generators, etc)\n   *      - Smarter constant and function matching\n   *\n   * Adds the following new token classes:\n   *      constant, delimiter, variable, function, package\n   */\n  ;\n\n  (function (Prism) {\n    Prism.languages.php = Prism.languages.extend('clike', {\n      keyword: /\\b(?:__halt_compiler|abstract|and|array|as|break|callable|case|catch|class|clone|const|continue|declare|default|die|do|echo|else|elseif|empty|enddeclare|endfor|endforeach|endif|endswitch|endwhile|eval|exit|extends|final|finally|for|foreach|function|global|goto|if|implements|include|include_once|instanceof|insteadof|interface|isset|list|namespace|new|or|parent|print|private|protected|public|require|require_once|return|static|switch|throw|trait|try|unset|use|var|while|xor|yield)\\b/i,\n      boolean: {\n        pattern: /\\b(?:false|true)\\b/i,\n        alias: 'constant'\n      },\n      constant: [/\\b[A-Z_][A-Z0-9_]*\\b/, /\\b(?:null)\\b/i],\n      comment: {\n        pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n        lookbehind: true\n      }\n    });\n    Prism.languages.insertBefore('php', 'string', {\n      'shell-comment': {\n        pattern: /(^|[^\\\\])#.*/,\n        lookbehind: true,\n        alias: 'comment'\n      }\n    });\n    Prism.languages.insertBefore('php', 'comment', {\n      delimiter: {\n        pattern: /\\?>$|^<\\?(?:php(?=\\s)|=)?/i,\n        alias: 'important'\n      }\n    });\n    Prism.languages.insertBefore('php', 'keyword', {\n      variable: /\\$+(?:\\w+\\b|(?={))/i,\n      package: {\n        pattern: /(\\\\|namespace\\s+|use\\s+)[\\w\\\\]+/,\n        lookbehind: true,\n        inside: {\n          punctuation: /\\\\/\n        }\n      }\n    }); // Must be defined after the function pattern\n\n    Prism.languages.insertBefore('php', 'operator', {\n      property: {\n        pattern: /(->)[\\w]+/,\n        lookbehind: true\n      }\n    });\n    var string_interpolation = {\n      pattern: /{\\$(?:{(?:{[^{}]+}|[^{}]+)}|[^{}])+}|(^|[^\\\\{])\\$+(?:\\w+(?:\\[.+?]|->\\w+)*)/,\n      lookbehind: true,\n      inside: {\n        rest: Prism.languages.php\n      }\n    };\n    Prism.languages.insertBefore('php', 'string', {\n      'nowdoc-string': {\n        pattern: /<<<'([^']+)'(?:\\r\\n?|\\n)(?:.*(?:\\r\\n?|\\n))*?\\1;/,\n        greedy: true,\n        alias: 'string',\n        inside: {\n          delimiter: {\n            pattern: /^<<<'[^']+'|[a-z_]\\w*;$/i,\n            alias: 'symbol',\n            inside: {\n              punctuation: /^<<<'?|[';]$/\n            }\n          }\n        }\n      },\n      'heredoc-string': {\n        pattern: /<<<(?:\"([^\"]+)\"(?:\\r\\n?|\\n)(?:.*(?:\\r\\n?|\\n))*?\\1;|([a-z_]\\w*)(?:\\r\\n?|\\n)(?:.*(?:\\r\\n?|\\n))*?\\2;)/i,\n        greedy: true,\n        alias: 'string',\n        inside: {\n          delimiter: {\n            pattern: /^<<<(?:\"[^\"]+\"|[a-z_]\\w*)|[a-z_]\\w*;$/i,\n            alias: 'symbol',\n            inside: {\n              punctuation: /^<<<\"?|[\";]$/\n            }\n          },\n          interpolation: string_interpolation // See below\n\n        }\n      },\n      'single-quoted-string': {\n        pattern: /'(?:\\\\[\\s\\S]|[^\\\\'])*'/,\n        greedy: true,\n        alias: 'string'\n      },\n      'double-quoted-string': {\n        pattern: /\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,\n        greedy: true,\n        alias: 'string',\n        inside: {\n          interpolation: string_interpolation // See below\n\n        }\n      }\n    }); // The different types of PHP strings \"replace\" the C-like standard string\n\n    delete Prism.languages.php['string'];\n    Prism.hooks.add('before-tokenize', function (env) {\n      if (!/<\\?/.test(env.code)) {\n        return;\n      }\n\n      var phpPattern = /<\\?(?:[^\"'/#]|\\/(?![*/])|(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|(?:\\/\\/|#)(?:[^?\\n\\r]|\\?(?!>))*|\\/\\*[\\s\\S]*?(?:\\*\\/|$))*?(?:\\?>|$)/gi;\n      Prism.languages['markup-templating'].buildPlaceholders(env, 'php', phpPattern);\n    });\n    Prism.hooks.add('after-tokenize', function (env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'php');\n    });\n  })(Prism);\n}","map":{"version":3,"sources":["/Users/luismelendez/Desktop/capstone/capstone/client/node_modules/refractor/lang/php.js"],"names":["refractorMarkupTemplating","require","module","exports","php","displayName","aliases","Prism","register","languages","extend","keyword","boolean","pattern","alias","constant","comment","lookbehind","insertBefore","delimiter","variable","package","inside","punctuation","property","string_interpolation","rest","greedy","interpolation","hooks","add","env","test","code","phpPattern","buildPlaceholders","tokenizePlaceholders"],"mappings":"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","sourcesContent":["'use strict'\nvar refractorMarkupTemplating = require('./markup-templating.js')\nmodule.exports = php\nphp.displayName = 'php'\nphp.aliases = []\nfunction php(Prism) {\n  Prism.register(refractorMarkupTemplating)\n  /**\n   * Original by Aaron Harun: http://aahacreative.com/2012/07/31/php-syntax-highlighting-prism/\n   * Modified by Miles Johnson: http://milesj.me\n   *\n   * Supports the following:\n   *      - Extends clike syntax\n   *      - Support for PHP 5.3+ (namespaces, traits, generators, etc)\n   *      - Smarter constant and function matching\n   *\n   * Adds the following new token classes:\n   *      constant, delimiter, variable, function, package\n   */\n  ;(function(Prism) {\n    Prism.languages.php = Prism.languages.extend('clike', {\n      keyword: /\\b(?:__halt_compiler|abstract|and|array|as|break|callable|case|catch|class|clone|const|continue|declare|default|die|do|echo|else|elseif|empty|enddeclare|endfor|endforeach|endif|endswitch|endwhile|eval|exit|extends|final|finally|for|foreach|function|global|goto|if|implements|include|include_once|instanceof|insteadof|interface|isset|list|namespace|new|or|parent|print|private|protected|public|require|require_once|return|static|switch|throw|trait|try|unset|use|var|while|xor|yield)\\b/i,\n      boolean: {\n        pattern: /\\b(?:false|true)\\b/i,\n        alias: 'constant'\n      },\n      constant: [/\\b[A-Z_][A-Z0-9_]*\\b/, /\\b(?:null)\\b/i],\n      comment: {\n        pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n        lookbehind: true\n      }\n    })\n    Prism.languages.insertBefore('php', 'string', {\n      'shell-comment': {\n        pattern: /(^|[^\\\\])#.*/,\n        lookbehind: true,\n        alias: 'comment'\n      }\n    })\n    Prism.languages.insertBefore('php', 'comment', {\n      delimiter: {\n        pattern: /\\?>$|^<\\?(?:php(?=\\s)|=)?/i,\n        alias: 'important'\n      }\n    })\n    Prism.languages.insertBefore('php', 'keyword', {\n      variable: /\\$+(?:\\w+\\b|(?={))/i,\n      package: {\n        pattern: /(\\\\|namespace\\s+|use\\s+)[\\w\\\\]+/,\n        lookbehind: true,\n        inside: {\n          punctuation: /\\\\/\n        }\n      }\n    }) // Must be defined after the function pattern\n    Prism.languages.insertBefore('php', 'operator', {\n      property: {\n        pattern: /(->)[\\w]+/,\n        lookbehind: true\n      }\n    })\n    var string_interpolation = {\n      pattern: /{\\$(?:{(?:{[^{}]+}|[^{}]+)}|[^{}])+}|(^|[^\\\\{])\\$+(?:\\w+(?:\\[.+?]|->\\w+)*)/,\n      lookbehind: true,\n      inside: {\n        rest: Prism.languages.php\n      }\n    }\n    Prism.languages.insertBefore('php', 'string', {\n      'nowdoc-string': {\n        pattern: /<<<'([^']+)'(?:\\r\\n?|\\n)(?:.*(?:\\r\\n?|\\n))*?\\1;/,\n        greedy: true,\n        alias: 'string',\n        inside: {\n          delimiter: {\n            pattern: /^<<<'[^']+'|[a-z_]\\w*;$/i,\n            alias: 'symbol',\n            inside: {\n              punctuation: /^<<<'?|[';]$/\n            }\n          }\n        }\n      },\n      'heredoc-string': {\n        pattern: /<<<(?:\"([^\"]+)\"(?:\\r\\n?|\\n)(?:.*(?:\\r\\n?|\\n))*?\\1;|([a-z_]\\w*)(?:\\r\\n?|\\n)(?:.*(?:\\r\\n?|\\n))*?\\2;)/i,\n        greedy: true,\n        alias: 'string',\n        inside: {\n          delimiter: {\n            pattern: /^<<<(?:\"[^\"]+\"|[a-z_]\\w*)|[a-z_]\\w*;$/i,\n            alias: 'symbol',\n            inside: {\n              punctuation: /^<<<\"?|[\";]$/\n            }\n          },\n          interpolation: string_interpolation // See below\n        }\n      },\n      'single-quoted-string': {\n        pattern: /'(?:\\\\[\\s\\S]|[^\\\\'])*'/,\n        greedy: true,\n        alias: 'string'\n      },\n      'double-quoted-string': {\n        pattern: /\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,\n        greedy: true,\n        alias: 'string',\n        inside: {\n          interpolation: string_interpolation // See below\n        }\n      }\n    }) // The different types of PHP strings \"replace\" the C-like standard string\n    delete Prism.languages.php['string']\n    Prism.hooks.add('before-tokenize', function(env) {\n      if (!/<\\?/.test(env.code)) {\n        return\n      }\n      var phpPattern = /<\\?(?:[^\"'/#]|\\/(?![*/])|(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|(?:\\/\\/|#)(?:[^?\\n\\r]|\\?(?!>))*|\\/\\*[\\s\\S]*?(?:\\*\\/|$))*?(?:\\?>|$)/gi\n      Prism.languages['markup-templating'].buildPlaceholders(\n        env,\n        'php',\n        phpPattern\n      )\n    })\n    Prism.hooks.add('after-tokenize', function(env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'php')\n    })\n  })(Prism)\n}\n"]},"metadata":{},"sourceType":"script"}