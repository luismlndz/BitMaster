{"ast":null,"code":"'use strict';\n\nmodule.exports = textile;\ntextile.displayName = 'textile';\ntextile.aliases = [];\n\nfunction textile(Prism) {\n  ;\n\n  (function (Prism) {\n    // We don't allow for pipes inside parentheses\n    // to not break table pattern |(. foo |). bar |\n    var modifierRegex = /(?:\\([^|)]+\\)|\\[[^\\]]+\\]|\\{[^}]+\\})+/.source;\n    var modifierTokens = {\n      css: {\n        pattern: /\\{[^}]+\\}/,\n        inside: {\n          rest: Prism.languages.css\n        }\n      },\n      'class-id': {\n        pattern: /(\\()[^)]+(?=\\))/,\n        lookbehind: true,\n        alias: 'attr-value'\n      },\n      lang: {\n        pattern: /(\\[)[^\\]]+(?=\\])/,\n        lookbehind: true,\n        alias: 'attr-value'\n      },\n      // Anything else is punctuation (the first pattern is for row/col spans inside tables)\n      punctuation: /[\\\\\\/]\\d+|\\S/\n    };\n    var textile = Prism.languages.textile = Prism.languages.extend('markup', {\n      phrase: {\n        pattern: /(^|\\r|\\n)\\S[\\s\\S]*?(?=$|\\r?\\n\\r?\\n|\\r\\r)/,\n        lookbehind: true,\n        inside: {\n          // h1. Header 1\n          'block-tag': {\n            pattern: RegExp('^[a-z]\\\\w*(?:' + modifierRegex + '|[<>=()])*\\\\.'),\n            inside: {\n              modifier: {\n                pattern: RegExp('(^[a-z]\\\\w*)(?:' + modifierRegex + '|[<>=()])+(?=\\\\.)'),\n                lookbehind: true,\n                inside: modifierTokens\n              },\n              tag: /^[a-z]\\w*/,\n              punctuation: /\\.$/\n            }\n          },\n          // # List item\n          // * List item\n          list: {\n            pattern: RegExp('^[*#]+(?:' + modifierRegex + ')?\\\\s+.+', 'm'),\n            inside: {\n              modifier: {\n                pattern: RegExp('(^[*#]+)' + modifierRegex),\n                lookbehind: true,\n                inside: modifierTokens\n              },\n              punctuation: /^[*#]+/\n            }\n          },\n          // | cell | cell | cell |\n          table: {\n            // Modifiers can be applied to the row: {color:red}.|1|2|3|\n            // or the cell: |{color:red}.1|2|3|\n            pattern: RegExp('^(?:(?:' + modifierRegex + '|[<>=()^~])+\\\\.\\\\s*)?(?:\\\\|(?:(?:' + modifierRegex + '|[<>=()^~_]|[\\\\\\\\/]\\\\d+)+\\\\.)?[^|]*)+\\\\|', 'm'),\n            inside: {\n              modifier: {\n                // Modifiers for rows after the first one are\n                // preceded by a pipe and a line feed\n                pattern: RegExp('(^|\\\\|(?:\\\\r?\\\\n|\\\\r)?)(?:' + modifierRegex + '|[<>=()^~_]|[\\\\\\\\/]\\\\d+)+(?=\\\\.)'),\n                lookbehind: true,\n                inside: modifierTokens\n              },\n              punctuation: /\\||^\\./\n            }\n          },\n          inline: {\n            pattern: RegExp('(\\\\*\\\\*|__|\\\\?\\\\?|[*_%@+\\\\-^~])(?:' + modifierRegex + ')?.+?\\\\1'),\n            inside: {\n              // Note: superscripts and subscripts are not handled specifically\n              // *bold*, **bold**\n              bold: {\n                pattern: RegExp('(^(\\\\*\\\\*?)(?:' + modifierRegex + ')?).+?(?=\\\\2)'),\n                lookbehind: true\n              },\n              // _italic_, __italic__\n              italic: {\n                pattern: RegExp('(^(__?)(?:' + modifierRegex + ')?).+?(?=\\\\2)'),\n                lookbehind: true\n              },\n              // ??cite??\n              cite: {\n                pattern: RegExp('(^\\\\?\\\\?(?:' + modifierRegex + ')?).+?(?=\\\\?\\\\?)'),\n                lookbehind: true,\n                alias: 'string'\n              },\n              // @code@\n              code: {\n                pattern: RegExp('(^@(?:' + modifierRegex + ')?).+?(?=@)'),\n                lookbehind: true,\n                alias: 'keyword'\n              },\n              // +inserted+\n              inserted: {\n                pattern: RegExp('(^\\\\+(?:' + modifierRegex + ')?).+?(?=\\\\+)'),\n                lookbehind: true\n              },\n              // -deleted-\n              deleted: {\n                pattern: RegExp('(^-(?:' + modifierRegex + ')?).+?(?=-)'),\n                lookbehind: true\n              },\n              // %span%\n              span: {\n                pattern: RegExp('(^%(?:' + modifierRegex + ')?).+?(?=%)'),\n                lookbehind: true\n              },\n              modifier: {\n                pattern: RegExp('(^\\\\*\\\\*|__|\\\\?\\\\?|[*_%@+\\\\-^~])' + modifierRegex),\n                lookbehind: true,\n                inside: modifierTokens\n              },\n              punctuation: /[*_%?@+\\-^~]+/\n            }\n          },\n          // [alias]http://example.com\n          'link-ref': {\n            pattern: /^\\[[^\\]]+\\]\\S+$/m,\n            inside: {\n              string: {\n                pattern: /(\\[)[^\\]]+(?=\\])/,\n                lookbehind: true\n              },\n              url: {\n                pattern: /(\\])\\S+$/,\n                lookbehind: true\n              },\n              punctuation: /[\\[\\]]/\n            }\n          },\n          // \"text\":http://example.com\n          // \"text\":link-ref\n          link: {\n            pattern: RegExp('\"(?:' + modifierRegex + ')?[^\"]+\":.+?(?=[^\\\\w/]?(?:\\\\s|$))'),\n            inside: {\n              text: {\n                pattern: RegExp('(^\"(?:' + modifierRegex + ')?)[^\"]+(?=\")'),\n                lookbehind: true\n              },\n              modifier: {\n                pattern: RegExp('(^\")' + modifierRegex),\n                lookbehind: true,\n                inside: modifierTokens\n              },\n              url: {\n                pattern: /(:).+/,\n                lookbehind: true\n              },\n              punctuation: /[\":]/\n            }\n          },\n          // !image.jpg!\n          // !image.jpg(Title)!:http://example.com\n          image: {\n            pattern: RegExp('!(?:' + modifierRegex + '|[<>=()])*[^!\\\\s()]+(?:\\\\([^)]+\\\\))?!(?::.+?(?=[^\\\\w/]?(?:\\\\s|$)))?'),\n            inside: {\n              source: {\n                pattern: RegExp('(^!(?:' + modifierRegex + '|[<>=()])*)[^!\\\\s()]+(?:\\\\([^)]+\\\\))?(?=!)'),\n                lookbehind: true,\n                alias: 'url'\n              },\n              modifier: {\n                pattern: RegExp('(^!)(?:' + modifierRegex + '|[<>=()])+'),\n                lookbehind: true,\n                inside: modifierTokens\n              },\n              url: {\n                pattern: /(:).+/,\n                lookbehind: true\n              },\n              punctuation: /[!:]/\n            }\n          },\n          // Footnote[1]\n          footnote: {\n            pattern: /\\b\\[\\d+\\]/,\n            alias: 'comment',\n            inside: {\n              punctuation: /\\[|\\]/\n            }\n          },\n          // CSS(Cascading Style Sheet)\n          acronym: {\n            pattern: /\\b[A-Z\\d]+\\([^)]+\\)/,\n            inside: {\n              comment: {\n                pattern: /(\\()[^)]+(?=\\))/,\n                lookbehind: true\n              },\n              punctuation: /[()]/\n            }\n          },\n          // Prism(C)\n          mark: {\n            pattern: /\\b\\((?:TM|R|C)\\)/,\n            alias: 'comment',\n            inside: {\n              punctuation: /[()]/\n            }\n          }\n        }\n      }\n    });\n    var phraseInside = textile['phrase'].inside;\n    var nestedPatterns = {\n      inline: phraseInside['inline'],\n      link: phraseInside['link'],\n      image: phraseInside['image'],\n      footnote: phraseInside['footnote'],\n      acronym: phraseInside['acronym'],\n      mark: phraseInside['mark']\n    }; // Only allow alpha-numeric HTML tags, not XML tags\n\n    textile.tag.pattern = /<\\/?(?!\\d)[a-z0-9]+(?:\\s+[^\\s>\\/=]+(?:=(?:(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|[^\\s'\">=]+))?)*\\s*\\/?>/i; // Allow some nesting\n\n    var phraseInlineInside = phraseInside['inline'].inside;\n    phraseInlineInside['bold'].inside = nestedPatterns;\n    phraseInlineInside['italic'].inside = nestedPatterns;\n    phraseInlineInside['inserted'].inside = nestedPatterns;\n    phraseInlineInside['deleted'].inside = nestedPatterns;\n    phraseInlineInside['span'].inside = nestedPatterns; // Allow some styles inside table cells\n\n    var phraseTableInside = phraseInside['table'].inside;\n    phraseTableInside['inline'] = nestedPatterns['inline'];\n    phraseTableInside['link'] = nestedPatterns['link'];\n    phraseTableInside['image'] = nestedPatterns['image'];\n    phraseTableInside['footnote'] = nestedPatterns['footnote'];\n    phraseTableInside['acronym'] = nestedPatterns['acronym'];\n    phraseTableInside['mark'] = nestedPatterns['mark'];\n  })(Prism);\n}","map":{"version":3,"sources":["/Users/luismelendez/Desktop/capstone/capstone/client/node_modules/refractor/lang/textile.js"],"names":["module","exports","textile","displayName","aliases","Prism","modifierRegex","source","modifierTokens","css","pattern","inside","rest","languages","lookbehind","alias","lang","punctuation","extend","phrase","RegExp","modifier","tag","list","table","inline","bold","italic","cite","code","inserted","deleted","span","string","url","link","text","image","footnote","acronym","comment","mark","phraseInside","nestedPatterns","phraseInlineInside","phraseTableInside"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiBC,OAAjB;AACAA,OAAO,CAACC,WAAR,GAAsB,SAAtB;AACAD,OAAO,CAACE,OAAR,GAAkB,EAAlB;;AACA,SAASF,OAAT,CAAiBG,KAAjB,EAAwB;AACtB;;AAAC,GAAC,UAASA,KAAT,EAAgB;AAChB;AACA;AACA,QAAIC,aAAa,GAAG,uCAAuCC,MAA3D;AACA,QAAIC,cAAc,GAAG;AACnBC,MAAAA,GAAG,EAAE;AACHC,QAAAA,OAAO,EAAE,WADN;AAEHC,QAAAA,MAAM,EAAE;AACNC,UAAAA,IAAI,EAAEP,KAAK,CAACQ,SAAN,CAAgBJ;AADhB;AAFL,OADc;AAOnB,kBAAY;AACVC,QAAAA,OAAO,EAAE,iBADC;AAEVI,QAAAA,UAAU,EAAE,IAFF;AAGVC,QAAAA,KAAK,EAAE;AAHG,OAPO;AAYnBC,MAAAA,IAAI,EAAE;AACJN,QAAAA,OAAO,EAAE,kBADL;AAEJI,QAAAA,UAAU,EAAE,IAFR;AAGJC,QAAAA,KAAK,EAAE;AAHH,OAZa;AAiBnB;AACAE,MAAAA,WAAW,EAAE;AAlBM,KAArB;AAoBA,QAAIf,OAAO,GAAIG,KAAK,CAACQ,SAAN,CAAgBX,OAAhB,GAA0BG,KAAK,CAACQ,SAAN,CAAgBK,MAAhB,CAAuB,QAAvB,EAAiC;AACxEC,MAAAA,MAAM,EAAE;AACNT,QAAAA,OAAO,EAAE,0CADH;AAENI,QAAAA,UAAU,EAAE,IAFN;AAGNH,QAAAA,MAAM,EAAE;AACN;AACA,uBAAa;AACXD,YAAAA,OAAO,EAAEU,MAAM,CAAC,kBAAkBd,aAAlB,GAAkC,eAAnC,CADJ;AAEXK,YAAAA,MAAM,EAAE;AACNU,cAAAA,QAAQ,EAAE;AACRX,gBAAAA,OAAO,EAAEU,MAAM,CACb,oBAAoBd,aAApB,GAAoC,mBADvB,CADP;AAIRQ,gBAAAA,UAAU,EAAE,IAJJ;AAKRH,gBAAAA,MAAM,EAAEH;AALA,eADJ;AAQNc,cAAAA,GAAG,EAAE,WARC;AASNL,cAAAA,WAAW,EAAE;AATP;AAFG,WAFP;AAgBN;AACA;AACAM,UAAAA,IAAI,EAAE;AACJb,YAAAA,OAAO,EAAEU,MAAM,CAAC,cAAcd,aAAd,GAA8B,UAA/B,EAA2C,GAA3C,CADX;AAEJK,YAAAA,MAAM,EAAE;AACNU,cAAAA,QAAQ,EAAE;AACRX,gBAAAA,OAAO,EAAEU,MAAM,CAAC,aAAad,aAAd,CADP;AAERQ,gBAAAA,UAAU,EAAE,IAFJ;AAGRH,gBAAAA,MAAM,EAAEH;AAHA,eADJ;AAMNS,cAAAA,WAAW,EAAE;AANP;AAFJ,WAlBA;AA6BN;AACAO,UAAAA,KAAK,EAAE;AACL;AACA;AACAd,YAAAA,OAAO,EAAEU,MAAM,CACb,YACEd,aADF,GAEE,mCAFF,GAGEA,aAHF,GAIE,0CALW,EAMb,GANa,CAHV;AAWLK,YAAAA,MAAM,EAAE;AACNU,cAAAA,QAAQ,EAAE;AACR;AACA;AACAX,gBAAAA,OAAO,EAAEU,MAAM,CACb,+BACEd,aADF,GAEE,kCAHW,CAHP;AAQRQ,gBAAAA,UAAU,EAAE,IARJ;AASRH,gBAAAA,MAAM,EAAEH;AATA,eADJ;AAYNS,cAAAA,WAAW,EAAE;AAZP;AAXH,WA9BD;AAwDNQ,UAAAA,MAAM,EAAE;AACNf,YAAAA,OAAO,EAAEU,MAAM,CACb,uCAAuCd,aAAvC,GAAuD,UAD1C,CADT;AAINK,YAAAA,MAAM,EAAE;AACN;AACA;AACAe,cAAAA,IAAI,EAAE;AACJhB,gBAAAA,OAAO,EAAEU,MAAM,CACb,mBAAmBd,aAAnB,GAAmC,eADtB,CADX;AAIJQ,gBAAAA,UAAU,EAAE;AAJR,eAHA;AASN;AACAa,cAAAA,MAAM,EAAE;AACNjB,gBAAAA,OAAO,EAAEU,MAAM,CAAC,eAAed,aAAf,GAA+B,eAAhC,CADT;AAENQ,gBAAAA,UAAU,EAAE;AAFN,eAVF;AAcN;AACAc,cAAAA,IAAI,EAAE;AACJlB,gBAAAA,OAAO,EAAEU,MAAM,CACb,gBAAgBd,aAAhB,GAAgC,kBADnB,CADX;AAIJQ,gBAAAA,UAAU,EAAE,IAJR;AAKJC,gBAAAA,KAAK,EAAE;AALH,eAfA;AAsBN;AACAc,cAAAA,IAAI,EAAE;AACJnB,gBAAAA,OAAO,EAAEU,MAAM,CAAC,WAAWd,aAAX,GAA2B,aAA5B,CADX;AAEJQ,gBAAAA,UAAU,EAAE,IAFR;AAGJC,gBAAAA,KAAK,EAAE;AAHH,eAvBA;AA4BN;AACAe,cAAAA,QAAQ,EAAE;AACRpB,gBAAAA,OAAO,EAAEU,MAAM,CAAC,aAAad,aAAb,GAA6B,eAA9B,CADP;AAERQ,gBAAAA,UAAU,EAAE;AAFJ,eA7BJ;AAiCN;AACAiB,cAAAA,OAAO,EAAE;AACPrB,gBAAAA,OAAO,EAAEU,MAAM,CAAC,WAAWd,aAAX,GAA2B,aAA5B,CADR;AAEPQ,gBAAAA,UAAU,EAAE;AAFL,eAlCH;AAsCN;AACAkB,cAAAA,IAAI,EAAE;AACJtB,gBAAAA,OAAO,EAAEU,MAAM,CAAC,WAAWd,aAAX,GAA2B,aAA5B,CADX;AAEJQ,gBAAAA,UAAU,EAAE;AAFR,eAvCA;AA2CNO,cAAAA,QAAQ,EAAE;AACRX,gBAAAA,OAAO,EAAEU,MAAM,CACb,qCAAqCd,aADxB,CADP;AAIRQ,gBAAAA,UAAU,EAAE,IAJJ;AAKRH,gBAAAA,MAAM,EAAEH;AALA,eA3CJ;AAkDNS,cAAAA,WAAW,EAAE;AAlDP;AAJF,WAxDF;AAiHN;AACA,sBAAY;AACVP,YAAAA,OAAO,EAAE,kBADC;AAEVC,YAAAA,MAAM,EAAE;AACNsB,cAAAA,MAAM,EAAE;AACNvB,gBAAAA,OAAO,EAAE,kBADH;AAENI,gBAAAA,UAAU,EAAE;AAFN,eADF;AAKNoB,cAAAA,GAAG,EAAE;AACHxB,gBAAAA,OAAO,EAAE,UADN;AAEHI,gBAAAA,UAAU,EAAE;AAFT,eALC;AASNG,cAAAA,WAAW,EAAE;AATP;AAFE,WAlHN;AAgIN;AACA;AACAkB,UAAAA,IAAI,EAAE;AACJzB,YAAAA,OAAO,EAAEU,MAAM,CACb,SAASd,aAAT,GAAyB,mCADZ,CADX;AAIJK,YAAAA,MAAM,EAAE;AACNyB,cAAAA,IAAI,EAAE;AACJ1B,gBAAAA,OAAO,EAAEU,MAAM,CAAC,WAAWd,aAAX,GAA2B,eAA5B,CADX;AAEJQ,gBAAAA,UAAU,EAAE;AAFR,eADA;AAKNO,cAAAA,QAAQ,EAAE;AACRX,gBAAAA,OAAO,EAAEU,MAAM,CAAC,SAASd,aAAV,CADP;AAERQ,gBAAAA,UAAU,EAAE,IAFJ;AAGRH,gBAAAA,MAAM,EAAEH;AAHA,eALJ;AAUN0B,cAAAA,GAAG,EAAE;AACHxB,gBAAAA,OAAO,EAAE,OADN;AAEHI,gBAAAA,UAAU,EAAE;AAFT,eAVC;AAcNG,cAAAA,WAAW,EAAE;AAdP;AAJJ,WAlIA;AAuJN;AACA;AACAoB,UAAAA,KAAK,EAAE;AACL3B,YAAAA,OAAO,EAAEU,MAAM,CACb,SACEd,aADF,GAEE,qEAHW,CADV;AAMLK,YAAAA,MAAM,EAAE;AACNJ,cAAAA,MAAM,EAAE;AACNG,gBAAAA,OAAO,EAAEU,MAAM,CACb,WACEd,aADF,GAEE,4CAHW,CADT;AAMNQ,gBAAAA,UAAU,EAAE,IANN;AAONC,gBAAAA,KAAK,EAAE;AAPD,eADF;AAUNM,cAAAA,QAAQ,EAAE;AACRX,gBAAAA,OAAO,EAAEU,MAAM,CAAC,YAAYd,aAAZ,GAA4B,YAA7B,CADP;AAERQ,gBAAAA,UAAU,EAAE,IAFJ;AAGRH,gBAAAA,MAAM,EAAEH;AAHA,eAVJ;AAeN0B,cAAAA,GAAG,EAAE;AACHxB,gBAAAA,OAAO,EAAE,OADN;AAEHI,gBAAAA,UAAU,EAAE;AAFT,eAfC;AAmBNG,cAAAA,WAAW,EAAE;AAnBP;AANH,WAzJD;AAqLN;AACAqB,UAAAA,QAAQ,EAAE;AACR5B,YAAAA,OAAO,EAAE,WADD;AAERK,YAAAA,KAAK,EAAE,SAFC;AAGRJ,YAAAA,MAAM,EAAE;AACNM,cAAAA,WAAW,EAAE;AADP;AAHA,WAtLJ;AA6LN;AACAsB,UAAAA,OAAO,EAAE;AACP7B,YAAAA,OAAO,EAAE,qBADF;AAEPC,YAAAA,MAAM,EAAE;AACN6B,cAAAA,OAAO,EAAE;AACP9B,gBAAAA,OAAO,EAAE,iBADF;AAEPI,gBAAAA,UAAU,EAAE;AAFL,eADH;AAKNG,cAAAA,WAAW,EAAE;AALP;AAFD,WA9LH;AAwMN;AACAwB,UAAAA,IAAI,EAAE;AACJ/B,YAAAA,OAAO,EAAE,kBADL;AAEJK,YAAAA,KAAK,EAAE,SAFH;AAGJJ,YAAAA,MAAM,EAAE;AACNM,cAAAA,WAAW,EAAE;AADP;AAHJ;AAzMA;AAHF;AADgE,KAAjC,CAAzC;AAuNA,QAAIyB,YAAY,GAAGxC,OAAO,CAAC,QAAD,CAAP,CAAkBS,MAArC;AACA,QAAIgC,cAAc,GAAG;AACnBlB,MAAAA,MAAM,EAAEiB,YAAY,CAAC,QAAD,CADD;AAEnBP,MAAAA,IAAI,EAAEO,YAAY,CAAC,MAAD,CAFC;AAGnBL,MAAAA,KAAK,EAAEK,YAAY,CAAC,OAAD,CAHA;AAInBJ,MAAAA,QAAQ,EAAEI,YAAY,CAAC,UAAD,CAJH;AAKnBH,MAAAA,OAAO,EAAEG,YAAY,CAAC,SAAD,CALF;AAMnBD,MAAAA,IAAI,EAAEC,YAAY,CAAC,MAAD;AANC,KAArB,CAhPgB,CAuPd;;AACFxC,IAAAA,OAAO,CAACoB,GAAR,CAAYZ,OAAZ,GAAsB,oGAAtB,CAxPgB,CAwP2G;;AAC3H,QAAIkC,kBAAkB,GAAGF,YAAY,CAAC,QAAD,CAAZ,CAAuB/B,MAAhD;AACAiC,IAAAA,kBAAkB,CAAC,MAAD,CAAlB,CAA2BjC,MAA3B,GAAoCgC,cAApC;AACAC,IAAAA,kBAAkB,CAAC,QAAD,CAAlB,CAA6BjC,MAA7B,GAAsCgC,cAAtC;AACAC,IAAAA,kBAAkB,CAAC,UAAD,CAAlB,CAA+BjC,MAA/B,GAAwCgC,cAAxC;AACAC,IAAAA,kBAAkB,CAAC,SAAD,CAAlB,CAA8BjC,MAA9B,GAAuCgC,cAAvC;AACAC,IAAAA,kBAAkB,CAAC,MAAD,CAAlB,CAA2BjC,MAA3B,GAAoCgC,cAApC,CA9PgB,CA8PmC;;AACnD,QAAIE,iBAAiB,GAAGH,YAAY,CAAC,OAAD,CAAZ,CAAsB/B,MAA9C;AACAkC,IAAAA,iBAAiB,CAAC,QAAD,CAAjB,GAA8BF,cAAc,CAAC,QAAD,CAA5C;AACAE,IAAAA,iBAAiB,CAAC,MAAD,CAAjB,GAA4BF,cAAc,CAAC,MAAD,CAA1C;AACAE,IAAAA,iBAAiB,CAAC,OAAD,CAAjB,GAA6BF,cAAc,CAAC,OAAD,CAA3C;AACAE,IAAAA,iBAAiB,CAAC,UAAD,CAAjB,GAAgCF,cAAc,CAAC,UAAD,CAA9C;AACAE,IAAAA,iBAAiB,CAAC,SAAD,CAAjB,GAA+BF,cAAc,CAAC,SAAD,CAA7C;AACAE,IAAAA,iBAAiB,CAAC,MAAD,CAAjB,GAA4BF,cAAc,CAAC,MAAD,CAA1C;AACD,GAtQA,EAsQEtC,KAtQF;AAuQF","sourcesContent":["'use strict'\n\nmodule.exports = textile\ntextile.displayName = 'textile'\ntextile.aliases = []\nfunction textile(Prism) {\n  ;(function(Prism) {\n    // We don't allow for pipes inside parentheses\n    // to not break table pattern |(. foo |). bar |\n    var modifierRegex = /(?:\\([^|)]+\\)|\\[[^\\]]+\\]|\\{[^}]+\\})+/.source\n    var modifierTokens = {\n      css: {\n        pattern: /\\{[^}]+\\}/,\n        inside: {\n          rest: Prism.languages.css\n        }\n      },\n      'class-id': {\n        pattern: /(\\()[^)]+(?=\\))/,\n        lookbehind: true,\n        alias: 'attr-value'\n      },\n      lang: {\n        pattern: /(\\[)[^\\]]+(?=\\])/,\n        lookbehind: true,\n        alias: 'attr-value'\n      },\n      // Anything else is punctuation (the first pattern is for row/col spans inside tables)\n      punctuation: /[\\\\\\/]\\d+|\\S/\n    }\n    var textile = (Prism.languages.textile = Prism.languages.extend('markup', {\n      phrase: {\n        pattern: /(^|\\r|\\n)\\S[\\s\\S]*?(?=$|\\r?\\n\\r?\\n|\\r\\r)/,\n        lookbehind: true,\n        inside: {\n          // h1. Header 1\n          'block-tag': {\n            pattern: RegExp('^[a-z]\\\\w*(?:' + modifierRegex + '|[<>=()])*\\\\.'),\n            inside: {\n              modifier: {\n                pattern: RegExp(\n                  '(^[a-z]\\\\w*)(?:' + modifierRegex + '|[<>=()])+(?=\\\\.)'\n                ),\n                lookbehind: true,\n                inside: modifierTokens\n              },\n              tag: /^[a-z]\\w*/,\n              punctuation: /\\.$/\n            }\n          },\n          // # List item\n          // * List item\n          list: {\n            pattern: RegExp('^[*#]+(?:' + modifierRegex + ')?\\\\s+.+', 'm'),\n            inside: {\n              modifier: {\n                pattern: RegExp('(^[*#]+)' + modifierRegex),\n                lookbehind: true,\n                inside: modifierTokens\n              },\n              punctuation: /^[*#]+/\n            }\n          },\n          // | cell | cell | cell |\n          table: {\n            // Modifiers can be applied to the row: {color:red}.|1|2|3|\n            // or the cell: |{color:red}.1|2|3|\n            pattern: RegExp(\n              '^(?:(?:' +\n                modifierRegex +\n                '|[<>=()^~])+\\\\.\\\\s*)?(?:\\\\|(?:(?:' +\n                modifierRegex +\n                '|[<>=()^~_]|[\\\\\\\\/]\\\\d+)+\\\\.)?[^|]*)+\\\\|',\n              'm'\n            ),\n            inside: {\n              modifier: {\n                // Modifiers for rows after the first one are\n                // preceded by a pipe and a line feed\n                pattern: RegExp(\n                  '(^|\\\\|(?:\\\\r?\\\\n|\\\\r)?)(?:' +\n                    modifierRegex +\n                    '|[<>=()^~_]|[\\\\\\\\/]\\\\d+)+(?=\\\\.)'\n                ),\n                lookbehind: true,\n                inside: modifierTokens\n              },\n              punctuation: /\\||^\\./\n            }\n          },\n          inline: {\n            pattern: RegExp(\n              '(\\\\*\\\\*|__|\\\\?\\\\?|[*_%@+\\\\-^~])(?:' + modifierRegex + ')?.+?\\\\1'\n            ),\n            inside: {\n              // Note: superscripts and subscripts are not handled specifically\n              // *bold*, **bold**\n              bold: {\n                pattern: RegExp(\n                  '(^(\\\\*\\\\*?)(?:' + modifierRegex + ')?).+?(?=\\\\2)'\n                ),\n                lookbehind: true\n              },\n              // _italic_, __italic__\n              italic: {\n                pattern: RegExp('(^(__?)(?:' + modifierRegex + ')?).+?(?=\\\\2)'),\n                lookbehind: true\n              },\n              // ??cite??\n              cite: {\n                pattern: RegExp(\n                  '(^\\\\?\\\\?(?:' + modifierRegex + ')?).+?(?=\\\\?\\\\?)'\n                ),\n                lookbehind: true,\n                alias: 'string'\n              },\n              // @code@\n              code: {\n                pattern: RegExp('(^@(?:' + modifierRegex + ')?).+?(?=@)'),\n                lookbehind: true,\n                alias: 'keyword'\n              },\n              // +inserted+\n              inserted: {\n                pattern: RegExp('(^\\\\+(?:' + modifierRegex + ')?).+?(?=\\\\+)'),\n                lookbehind: true\n              },\n              // -deleted-\n              deleted: {\n                pattern: RegExp('(^-(?:' + modifierRegex + ')?).+?(?=-)'),\n                lookbehind: true\n              },\n              // %span%\n              span: {\n                pattern: RegExp('(^%(?:' + modifierRegex + ')?).+?(?=%)'),\n                lookbehind: true\n              },\n              modifier: {\n                pattern: RegExp(\n                  '(^\\\\*\\\\*|__|\\\\?\\\\?|[*_%@+\\\\-^~])' + modifierRegex\n                ),\n                lookbehind: true,\n                inside: modifierTokens\n              },\n              punctuation: /[*_%?@+\\-^~]+/\n            }\n          },\n          // [alias]http://example.com\n          'link-ref': {\n            pattern: /^\\[[^\\]]+\\]\\S+$/m,\n            inside: {\n              string: {\n                pattern: /(\\[)[^\\]]+(?=\\])/,\n                lookbehind: true\n              },\n              url: {\n                pattern: /(\\])\\S+$/,\n                lookbehind: true\n              },\n              punctuation: /[\\[\\]]/\n            }\n          },\n          // \"text\":http://example.com\n          // \"text\":link-ref\n          link: {\n            pattern: RegExp(\n              '\"(?:' + modifierRegex + ')?[^\"]+\":.+?(?=[^\\\\w/]?(?:\\\\s|$))'\n            ),\n            inside: {\n              text: {\n                pattern: RegExp('(^\"(?:' + modifierRegex + ')?)[^\"]+(?=\")'),\n                lookbehind: true\n              },\n              modifier: {\n                pattern: RegExp('(^\")' + modifierRegex),\n                lookbehind: true,\n                inside: modifierTokens\n              },\n              url: {\n                pattern: /(:).+/,\n                lookbehind: true\n              },\n              punctuation: /[\":]/\n            }\n          },\n          // !image.jpg!\n          // !image.jpg(Title)!:http://example.com\n          image: {\n            pattern: RegExp(\n              '!(?:' +\n                modifierRegex +\n                '|[<>=()])*[^!\\\\s()]+(?:\\\\([^)]+\\\\))?!(?::.+?(?=[^\\\\w/]?(?:\\\\s|$)))?'\n            ),\n            inside: {\n              source: {\n                pattern: RegExp(\n                  '(^!(?:' +\n                    modifierRegex +\n                    '|[<>=()])*)[^!\\\\s()]+(?:\\\\([^)]+\\\\))?(?=!)'\n                ),\n                lookbehind: true,\n                alias: 'url'\n              },\n              modifier: {\n                pattern: RegExp('(^!)(?:' + modifierRegex + '|[<>=()])+'),\n                lookbehind: true,\n                inside: modifierTokens\n              },\n              url: {\n                pattern: /(:).+/,\n                lookbehind: true\n              },\n              punctuation: /[!:]/\n            }\n          },\n          // Footnote[1]\n          footnote: {\n            pattern: /\\b\\[\\d+\\]/,\n            alias: 'comment',\n            inside: {\n              punctuation: /\\[|\\]/\n            }\n          },\n          // CSS(Cascading Style Sheet)\n          acronym: {\n            pattern: /\\b[A-Z\\d]+\\([^)]+\\)/,\n            inside: {\n              comment: {\n                pattern: /(\\()[^)]+(?=\\))/,\n                lookbehind: true\n              },\n              punctuation: /[()]/\n            }\n          },\n          // Prism(C)\n          mark: {\n            pattern: /\\b\\((?:TM|R|C)\\)/,\n            alias: 'comment',\n            inside: {\n              punctuation: /[()]/\n            }\n          }\n        }\n      }\n    }))\n    var phraseInside = textile['phrase'].inside\n    var nestedPatterns = {\n      inline: phraseInside['inline'],\n      link: phraseInside['link'],\n      image: phraseInside['image'],\n      footnote: phraseInside['footnote'],\n      acronym: phraseInside['acronym'],\n      mark: phraseInside['mark']\n    } // Only allow alpha-numeric HTML tags, not XML tags\n    textile.tag.pattern = /<\\/?(?!\\d)[a-z0-9]+(?:\\s+[^\\s>\\/=]+(?:=(?:(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|[^\\s'\">=]+))?)*\\s*\\/?>/i // Allow some nesting\n    var phraseInlineInside = phraseInside['inline'].inside\n    phraseInlineInside['bold'].inside = nestedPatterns\n    phraseInlineInside['italic'].inside = nestedPatterns\n    phraseInlineInside['inserted'].inside = nestedPatterns\n    phraseInlineInside['deleted'].inside = nestedPatterns\n    phraseInlineInside['span'].inside = nestedPatterns // Allow some styles inside table cells\n    var phraseTableInside = phraseInside['table'].inside\n    phraseTableInside['inline'] = nestedPatterns['inline']\n    phraseTableInside['link'] = nestedPatterns['link']\n    phraseTableInside['image'] = nestedPatterns['image']\n    phraseTableInside['footnote'] = nestedPatterns['footnote']\n    phraseTableInside['acronym'] = nestedPatterns['acronym']\n    phraseTableInside['mark'] = nestedPatterns['mark']\n  })(Prism)\n}\n"]},"metadata":{},"sourceType":"script"}