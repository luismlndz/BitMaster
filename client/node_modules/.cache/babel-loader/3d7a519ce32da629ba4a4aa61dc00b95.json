{"ast":null,"code":"'use strict';\n\nmodule.exports = css;\ncss.displayName = 'css';\ncss.aliases = [];\n\nfunction css(Prism) {\n  ;\n\n  (function (Prism) {\n    var string = /(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/;\n    Prism.languages.css = {\n      comment: /\\/\\*[\\s\\S]*?\\*\\//,\n      atrule: {\n        pattern: /@[\\w-]+[\\s\\S]*?(?:;|(?=\\s*\\{))/,\n        inside: {\n          rule: /@[\\w-]+/ // See rest below\n\n        }\n      },\n      url: {\n        pattern: RegExp('url\\\\((?:' + string.source + '|[^\\n\\r()]*)\\\\)', 'i'),\n        inside: {\n          function: /^url/i,\n          punctuation: /^\\(|\\)$/\n        }\n      },\n      selector: RegExp('[^{}\\\\s](?:[^{};\"\\']|' + string.source + ')*?(?=\\\\s*\\\\{)'),\n      string: {\n        pattern: string,\n        greedy: true\n      },\n      property: /[-_a-z\\xA0-\\uFFFF][-\\w\\xA0-\\uFFFF]*(?=\\s*:)/i,\n      important: /!important\\b/i,\n      function: /[-a-z0-9]+(?=\\()/i,\n      punctuation: /[(){};:,]/\n    };\n    Prism.languages.css['atrule'].inside.rest = Prism.languages.css;\n    var markup = Prism.languages.markup;\n\n    if (markup) {\n      markup.tag.addInlined('style', 'css');\n      Prism.languages.insertBefore('inside', 'attr-value', {\n        'style-attr': {\n          pattern: /\\s*style=(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/i,\n          inside: {\n            'attr-name': {\n              pattern: /^\\s*style/i,\n              inside: markup.tag.inside\n            },\n            punctuation: /^\\s*=\\s*['\"]|['\"]\\s*$/,\n            'attr-value': {\n              pattern: /.+/i,\n              inside: Prism.languages.css\n            }\n          },\n          alias: 'language-css'\n        }\n      }, markup.tag);\n    }\n  })(Prism);\n}","map":{"version":3,"sources":["/Users/luismelendez/Desktop/capstone/capstone/client/node_modules/refractor/lang/css.js"],"names":["module","exports","css","displayName","aliases","Prism","string","languages","comment","atrule","pattern","inside","rule","url","RegExp","source","function","punctuation","selector","greedy","property","important","rest","markup","tag","addInlined","insertBefore","alias"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiBC,GAAjB;AACAA,GAAG,CAACC,WAAJ,GAAkB,KAAlB;AACAD,GAAG,CAACE,OAAJ,GAAc,EAAd;;AACA,SAASF,GAAT,CAAaG,KAAb,EAAoB;AAClB;;AAAC,GAAC,UAASA,KAAT,EAAgB;AAChB,QAAIC,MAAM,GAAG,+CAAb;AACAD,IAAAA,KAAK,CAACE,SAAN,CAAgBL,GAAhB,GAAsB;AACpBM,MAAAA,OAAO,EAAE,kBADW;AAEpBC,MAAAA,MAAM,EAAE;AACNC,QAAAA,OAAO,EAAE,gCADH;AAENC,QAAAA,MAAM,EAAE;AACNC,UAAAA,IAAI,EAAE,SADA,CACU;;AADV;AAFF,OAFY;AAQpBC,MAAAA,GAAG,EAAE;AACHH,QAAAA,OAAO,EAAEI,MAAM,CAAC,cAAcR,MAAM,CAACS,MAArB,GAA8B,iBAA/B,EAAkD,GAAlD,CADZ;AAEHJ,QAAAA,MAAM,EAAE;AACNK,UAAAA,QAAQ,EAAE,OADJ;AAENC,UAAAA,WAAW,EAAE;AAFP;AAFL,OARe;AAepBC,MAAAA,QAAQ,EAAEJ,MAAM,CACd,0BAA0BR,MAAM,CAACS,MAAjC,GAA0C,gBAD5B,CAfI;AAkBpBT,MAAAA,MAAM,EAAE;AACNI,QAAAA,OAAO,EAAEJ,MADH;AAENa,QAAAA,MAAM,EAAE;AAFF,OAlBY;AAsBpBC,MAAAA,QAAQ,EAAE,8CAtBU;AAuBpBC,MAAAA,SAAS,EAAE,eAvBS;AAwBpBL,MAAAA,QAAQ,EAAE,mBAxBU;AAyBpBC,MAAAA,WAAW,EAAE;AAzBO,KAAtB;AA2BAZ,IAAAA,KAAK,CAACE,SAAN,CAAgBL,GAAhB,CAAoB,QAApB,EAA8BS,MAA9B,CAAqCW,IAArC,GAA4CjB,KAAK,CAACE,SAAN,CAAgBL,GAA5D;AACA,QAAIqB,MAAM,GAAGlB,KAAK,CAACE,SAAN,CAAgBgB,MAA7B;;AACA,QAAIA,MAAJ,EAAY;AACVA,MAAAA,MAAM,CAACC,GAAP,CAAWC,UAAX,CAAsB,OAAtB,EAA+B,KAA/B;AACApB,MAAAA,KAAK,CAACE,SAAN,CAAgBmB,YAAhB,CACE,QADF,EAEE,YAFF,EAGE;AACE,sBAAc;AACZhB,UAAAA,OAAO,EAAE,4CADG;AAEZC,UAAAA,MAAM,EAAE;AACN,yBAAa;AACXD,cAAAA,OAAO,EAAE,YADE;AAEXC,cAAAA,MAAM,EAAEY,MAAM,CAACC,GAAP,CAAWb;AAFR,aADP;AAKNM,YAAAA,WAAW,EAAE,uBALP;AAMN,0BAAc;AACZP,cAAAA,OAAO,EAAE,KADG;AAEZC,cAAAA,MAAM,EAAEN,KAAK,CAACE,SAAN,CAAgBL;AAFZ;AANR,WAFI;AAaZyB,UAAAA,KAAK,EAAE;AAbK;AADhB,OAHF,EAoBEJ,MAAM,CAACC,GApBT;AAsBD;AACF,GAxDA,EAwDEnB,KAxDF;AAyDF","sourcesContent":["'use strict'\n\nmodule.exports = css\ncss.displayName = 'css'\ncss.aliases = []\nfunction css(Prism) {\n  ;(function(Prism) {\n    var string = /(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/\n    Prism.languages.css = {\n      comment: /\\/\\*[\\s\\S]*?\\*\\//,\n      atrule: {\n        pattern: /@[\\w-]+[\\s\\S]*?(?:;|(?=\\s*\\{))/,\n        inside: {\n          rule: /@[\\w-]+/ // See rest below\n        }\n      },\n      url: {\n        pattern: RegExp('url\\\\((?:' + string.source + '|[^\\n\\r()]*)\\\\)', 'i'),\n        inside: {\n          function: /^url/i,\n          punctuation: /^\\(|\\)$/\n        }\n      },\n      selector: RegExp(\n        '[^{}\\\\s](?:[^{};\"\\']|' + string.source + ')*?(?=\\\\s*\\\\{)'\n      ),\n      string: {\n        pattern: string,\n        greedy: true\n      },\n      property: /[-_a-z\\xA0-\\uFFFF][-\\w\\xA0-\\uFFFF]*(?=\\s*:)/i,\n      important: /!important\\b/i,\n      function: /[-a-z0-9]+(?=\\()/i,\n      punctuation: /[(){};:,]/\n    }\n    Prism.languages.css['atrule'].inside.rest = Prism.languages.css\n    var markup = Prism.languages.markup\n    if (markup) {\n      markup.tag.addInlined('style', 'css')\n      Prism.languages.insertBefore(\n        'inside',\n        'attr-value',\n        {\n          'style-attr': {\n            pattern: /\\s*style=(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/i,\n            inside: {\n              'attr-name': {\n                pattern: /^\\s*style/i,\n                inside: markup.tag.inside\n              },\n              punctuation: /^\\s*=\\s*['\"]|['\"]\\s*$/,\n              'attr-value': {\n                pattern: /.+/i,\n                inside: Prism.languages.css\n              }\n            },\n            alias: 'language-css'\n          }\n        },\n        markup.tag\n      )\n    }\n  })(Prism)\n}\n"]},"metadata":{},"sourceType":"script"}