{"ast":null,"code":"'use strict';\n\nmodule.exports = csharp;\ncsharp.displayName = 'csharp';\ncsharp.aliases = ['dotnet', 'cs'];\n\nfunction csharp(Prism) {\n  Prism.languages.csharp = Prism.languages.extend('clike', {\n    keyword: /\\b(?:abstract|add|alias|as|ascending|async|await|base|bool|break|byte|case|catch|char|checked|class|const|continue|decimal|default|delegate|descending|do|double|dynamic|else|enum|event|explicit|extern|false|finally|fixed|float|for|foreach|from|get|global|goto|group|if|implicit|in|int|interface|internal|into|is|join|let|lock|long|namespace|new|null|object|operator|orderby|out|override|params|partial|private|protected|public|readonly|ref|remove|return|sbyte|sealed|select|set|short|sizeof|stackalloc|static|string|struct|switch|this|throw|true|try|typeof|uint|ulong|unchecked|unsafe|ushort|using|value|var|virtual|void|volatile|where|while|yield)\\b/,\n    string: [{\n      pattern: /@(\"|')(?:\\1\\1|\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/,\n      greedy: true\n    }, {\n      pattern: /(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*?\\1/,\n      greedy: true\n    }],\n    'class-name': [{\n      // (Foo bar, Bar baz)\n      pattern: /\\b[A-Z]\\w*(?:\\.\\w+)*\\b(?=\\s+\\w+)/,\n      inside: {\n        punctuation: /\\./\n      }\n    }, {\n      // [Foo]\n      pattern: /(\\[)[A-Z]\\w*(?:\\.\\w+)*\\b/,\n      lookbehind: true,\n      inside: {\n        punctuation: /\\./\n      }\n    }, {\n      // class Foo : Bar\n      pattern: /(\\b(?:class|interface)\\s+[A-Z]\\w*(?:\\.\\w+)*\\s*:\\s*)[A-Z]\\w*(?:\\.\\w+)*\\b/,\n      lookbehind: true,\n      inside: {\n        punctuation: /\\./\n      }\n    }, {\n      // class Foo\n      pattern: /((?:\\b(?:class|interface|new)\\s+)|(?:catch\\s+\\())[A-Z]\\w*(?:\\.\\w+)*\\b/,\n      lookbehind: true,\n      inside: {\n        punctuation: /\\./\n      }\n    }],\n    number: /\\b0x[\\da-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)f?/i,\n    operator: />>=?|<<=?|[-=]>|([-+&|?])\\1|~|[-+*/%&|^!=<>]=?/,\n    punctuation: /\\?\\.?|::|[{}[\\];(),.:]/\n  });\n  Prism.languages.insertBefore('csharp', 'class-name', {\n    'generic-method': {\n      pattern: /\\w+\\s*<[^>\\r\\n]+?>\\s*(?=\\()/,\n      inside: {\n        function: /^\\w+/,\n        'class-name': {\n          pattern: /\\b[A-Z]\\w*(?:\\.\\w+)*\\b/,\n          inside: {\n            punctuation: /\\./\n          }\n        },\n        keyword: Prism.languages.csharp.keyword,\n        punctuation: /[<>(),.:]/\n      }\n    },\n    preprocessor: {\n      pattern: /(^\\s*)#.*/m,\n      lookbehind: true,\n      alias: 'property',\n      inside: {\n        // highlight preprocessor directives as keywords\n        directive: {\n          pattern: /(\\s*#)\\b(?:define|elif|else|endif|endregion|error|if|line|pragma|region|undef|warning)\\b/,\n          lookbehind: true,\n          alias: 'keyword'\n        }\n      }\n    }\n  });\n  Prism.languages.dotnet = Prism.languages.cs = Prism.languages.csharp;\n}","map":{"version":3,"sources":["/Users/luismelendez/Desktop/capstone/capstone/client/node_modules/refractor/lang/csharp.js"],"names":["module","exports","csharp","displayName","aliases","Prism","languages","extend","keyword","string","pattern","greedy","inside","punctuation","lookbehind","number","operator","insertBefore","function","preprocessor","alias","directive","dotnet","cs"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiBC,MAAjB;AACAA,MAAM,CAACC,WAAP,GAAqB,QAArB;AACAD,MAAM,CAACE,OAAP,GAAiB,CAAC,QAAD,EAAW,IAAX,CAAjB;;AACA,SAASF,MAAT,CAAgBG,KAAhB,EAAuB;AACrBA,EAAAA,KAAK,CAACC,SAAN,CAAgBJ,MAAhB,GAAyBG,KAAK,CAACC,SAAN,CAAgBC,MAAhB,CAAuB,OAAvB,EAAgC;AACvDC,IAAAA,OAAO,EAAE,4oBAD8C;AAEvDC,IAAAA,MAAM,EAAE,CACN;AACEC,MAAAA,OAAO,EAAE,wCADX;AAEEC,MAAAA,MAAM,EAAE;AAFV,KADM,EAKN;AACED,MAAAA,OAAO,EAAE,kCADX;AAEEC,MAAAA,MAAM,EAAE;AAFV,KALM,CAF+C;AAYvD,kBAAc,CACZ;AACE;AACAD,MAAAA,OAAO,EAAE,kCAFX;AAGEE,MAAAA,MAAM,EAAE;AACNC,QAAAA,WAAW,EAAE;AADP;AAHV,KADY,EAQZ;AACE;AACAH,MAAAA,OAAO,EAAE,0BAFX;AAGEI,MAAAA,UAAU,EAAE,IAHd;AAIEF,MAAAA,MAAM,EAAE;AACNC,QAAAA,WAAW,EAAE;AADP;AAJV,KARY,EAgBZ;AACE;AACAH,MAAAA,OAAO,EAAE,yEAFX;AAGEI,MAAAA,UAAU,EAAE,IAHd;AAIEF,MAAAA,MAAM,EAAE;AACNC,QAAAA,WAAW,EAAE;AADP;AAJV,KAhBY,EAwBZ;AACE;AACAH,MAAAA,OAAO,EAAE,uEAFX;AAGEI,MAAAA,UAAU,EAAE,IAHd;AAIEF,MAAAA,MAAM,EAAE;AACNC,QAAAA,WAAW,EAAE;AADP;AAJV,KAxBY,CAZyC;AA6CvDE,IAAAA,MAAM,EAAE,2CA7C+C;AA8CvDC,IAAAA,QAAQ,EAAE,gDA9C6C;AA+CvDH,IAAAA,WAAW,EAAE;AA/C0C,GAAhC,CAAzB;AAiDAR,EAAAA,KAAK,CAACC,SAAN,CAAgBW,YAAhB,CAA6B,QAA7B,EAAuC,YAAvC,EAAqD;AACnD,sBAAkB;AAChBP,MAAAA,OAAO,EAAE,6BADO;AAEhBE,MAAAA,MAAM,EAAE;AACNM,QAAAA,QAAQ,EAAE,MADJ;AAEN,sBAAc;AACZR,UAAAA,OAAO,EAAE,wBADG;AAEZE,UAAAA,MAAM,EAAE;AACNC,YAAAA,WAAW,EAAE;AADP;AAFI,SAFR;AAQNL,QAAAA,OAAO,EAAEH,KAAK,CAACC,SAAN,CAAgBJ,MAAhB,CAAuBM,OAR1B;AASNK,QAAAA,WAAW,EAAE;AATP;AAFQ,KADiC;AAenDM,IAAAA,YAAY,EAAE;AACZT,MAAAA,OAAO,EAAE,YADG;AAEZI,MAAAA,UAAU,EAAE,IAFA;AAGZM,MAAAA,KAAK,EAAE,UAHK;AAIZR,MAAAA,MAAM,EAAE;AACN;AACAS,QAAAA,SAAS,EAAE;AACTX,UAAAA,OAAO,EAAE,0FADA;AAETI,UAAAA,UAAU,EAAE,IAFH;AAGTM,UAAAA,KAAK,EAAE;AAHE;AAFL;AAJI;AAfqC,GAArD;AA6BAf,EAAAA,KAAK,CAACC,SAAN,CAAgBgB,MAAhB,GAAyBjB,KAAK,CAACC,SAAN,CAAgBiB,EAAhB,GAAqBlB,KAAK,CAACC,SAAN,CAAgBJ,MAA9D;AACD","sourcesContent":["'use strict'\n\nmodule.exports = csharp\ncsharp.displayName = 'csharp'\ncsharp.aliases = ['dotnet', 'cs']\nfunction csharp(Prism) {\n  Prism.languages.csharp = Prism.languages.extend('clike', {\n    keyword: /\\b(?:abstract|add|alias|as|ascending|async|await|base|bool|break|byte|case|catch|char|checked|class|const|continue|decimal|default|delegate|descending|do|double|dynamic|else|enum|event|explicit|extern|false|finally|fixed|float|for|foreach|from|get|global|goto|group|if|implicit|in|int|interface|internal|into|is|join|let|lock|long|namespace|new|null|object|operator|orderby|out|override|params|partial|private|protected|public|readonly|ref|remove|return|sbyte|sealed|select|set|short|sizeof|stackalloc|static|string|struct|switch|this|throw|true|try|typeof|uint|ulong|unchecked|unsafe|ushort|using|value|var|virtual|void|volatile|where|while|yield)\\b/,\n    string: [\n      {\n        pattern: /@(\"|')(?:\\1\\1|\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/,\n        greedy: true\n      },\n      {\n        pattern: /(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*?\\1/,\n        greedy: true\n      }\n    ],\n    'class-name': [\n      {\n        // (Foo bar, Bar baz)\n        pattern: /\\b[A-Z]\\w*(?:\\.\\w+)*\\b(?=\\s+\\w+)/,\n        inside: {\n          punctuation: /\\./\n        }\n      },\n      {\n        // [Foo]\n        pattern: /(\\[)[A-Z]\\w*(?:\\.\\w+)*\\b/,\n        lookbehind: true,\n        inside: {\n          punctuation: /\\./\n        }\n      },\n      {\n        // class Foo : Bar\n        pattern: /(\\b(?:class|interface)\\s+[A-Z]\\w*(?:\\.\\w+)*\\s*:\\s*)[A-Z]\\w*(?:\\.\\w+)*\\b/,\n        lookbehind: true,\n        inside: {\n          punctuation: /\\./\n        }\n      },\n      {\n        // class Foo\n        pattern: /((?:\\b(?:class|interface|new)\\s+)|(?:catch\\s+\\())[A-Z]\\w*(?:\\.\\w+)*\\b/,\n        lookbehind: true,\n        inside: {\n          punctuation: /\\./\n        }\n      }\n    ],\n    number: /\\b0x[\\da-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)f?/i,\n    operator: />>=?|<<=?|[-=]>|([-+&|?])\\1|~|[-+*/%&|^!=<>]=?/,\n    punctuation: /\\?\\.?|::|[{}[\\];(),.:]/\n  })\n  Prism.languages.insertBefore('csharp', 'class-name', {\n    'generic-method': {\n      pattern: /\\w+\\s*<[^>\\r\\n]+?>\\s*(?=\\()/,\n      inside: {\n        function: /^\\w+/,\n        'class-name': {\n          pattern: /\\b[A-Z]\\w*(?:\\.\\w+)*\\b/,\n          inside: {\n            punctuation: /\\./\n          }\n        },\n        keyword: Prism.languages.csharp.keyword,\n        punctuation: /[<>(),.:]/\n      }\n    },\n    preprocessor: {\n      pattern: /(^\\s*)#.*/m,\n      lookbehind: true,\n      alias: 'property',\n      inside: {\n        // highlight preprocessor directives as keywords\n        directive: {\n          pattern: /(\\s*#)\\b(?:define|elif|else|endif|endregion|error|if|line|pragma|region|undef|warning)\\b/,\n          lookbehind: true,\n          alias: 'keyword'\n        }\n      }\n    }\n  })\n  Prism.languages.dotnet = Prism.languages.cs = Prism.languages.csharp\n}\n"]},"metadata":{},"sourceType":"script"}