{"ast":null,"code":"'use strict';\n\nmodule.exports = scheme;\nscheme.displayName = 'scheme';\nscheme.aliases = [];\n\nfunction scheme(Prism) {\n  Prism.languages.scheme = {\n    comment: /;.*/,\n    string: {\n      pattern: /\"(?:[^\"\\\\]|\\\\.)*\"|'[^()#'\\s]+/,\n      greedy: true\n    },\n    character: {\n      pattern: /#\\\\(?:[ux][a-fA-F\\d]+|[a-zA-Z]+|\\S)/,\n      alias: 'string'\n    },\n    keyword: {\n      pattern: /(\\()(?:define(?:-syntax|-library|-values)?|(?:case-)?lambda|let(?:\\*|rec)?(?:-values)?|else|if|cond|begin|delay(?:-force)?|parameterize|guard|set!|(?:quasi-)?quote|syntax-rules)(?=[()\\s])/,\n      lookbehind: true\n    },\n    builtin: {\n      pattern: /(\\()(?:(?:cons|car|cdr|list|call-with-current-continuation|call\\/cc|append|abs|apply|eval)\\b|null\\?|pair\\?|boolean\\?|eof-object\\?|char\\?|procedure\\?|number\\?|port\\?|string\\?|vector\\?|symbol\\?|bytevector\\?)(?=[()\\s])/,\n      lookbehind: true\n    },\n    number: {\n      pattern: /([\\s()])[-+]?(?:\\d+\\/\\d+|\\d*\\.?\\d+(?:\\s*[-+]\\s*\\d*\\.?\\d+i)?)\\b/,\n      lookbehind: true\n    },\n    boolean: /#[tf]/,\n    operator: {\n      pattern: /(\\()(?:[-+*%\\/]|[<>]=?|=>?)(?=\\s|$)/,\n      lookbehind: true\n    },\n    function: {\n      pattern: /(\\()[^()'\\s]+(?=[()\\s)]|$)/,\n      lookbehind: true\n    },\n    punctuation: /[()']/\n  };\n}","map":{"version":3,"sources":["/Users/luismelendez/Desktop/capstone/capstone/client/node_modules/refractor/lang/scheme.js"],"names":["module","exports","scheme","displayName","aliases","Prism","languages","comment","string","pattern","greedy","character","alias","keyword","lookbehind","builtin","number","boolean","operator","function","punctuation"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiBC,MAAjB;AACAA,MAAM,CAACC,WAAP,GAAqB,QAArB;AACAD,MAAM,CAACE,OAAP,GAAiB,EAAjB;;AACA,SAASF,MAAT,CAAgBG,KAAhB,EAAuB;AACrBA,EAAAA,KAAK,CAACC,SAAN,CAAgBJ,MAAhB,GAAyB;AACvBK,IAAAA,OAAO,EAAE,KADc;AAEvBC,IAAAA,MAAM,EAAE;AACNC,MAAAA,OAAO,EAAE,+BADH;AAENC,MAAAA,MAAM,EAAE;AAFF,KAFe;AAMvBC,IAAAA,SAAS,EAAE;AACTF,MAAAA,OAAO,EAAE,qCADA;AAETG,MAAAA,KAAK,EAAE;AAFE,KANY;AAUvBC,IAAAA,OAAO,EAAE;AACPJ,MAAAA,OAAO,EAAE,6LADF;AAEPK,MAAAA,UAAU,EAAE;AAFL,KAVc;AAcvBC,IAAAA,OAAO,EAAE;AACPN,MAAAA,OAAO,EAAE,yNADF;AAEPK,MAAAA,UAAU,EAAE;AAFL,KAdc;AAkBvBE,IAAAA,MAAM,EAAE;AACNP,MAAAA,OAAO,EAAE,gEADH;AAENK,MAAAA,UAAU,EAAE;AAFN,KAlBe;AAsBvBG,IAAAA,OAAO,EAAE,OAtBc;AAuBvBC,IAAAA,QAAQ,EAAE;AACRT,MAAAA,OAAO,EAAE,qCADD;AAERK,MAAAA,UAAU,EAAE;AAFJ,KAvBa;AA2BvBK,IAAAA,QAAQ,EAAE;AACRV,MAAAA,OAAO,EAAE,4BADD;AAERK,MAAAA,UAAU,EAAE;AAFJ,KA3Ba;AA+BvBM,IAAAA,WAAW,EAAE;AA/BU,GAAzB;AAiCD","sourcesContent":["'use strict'\n\nmodule.exports = scheme\nscheme.displayName = 'scheme'\nscheme.aliases = []\nfunction scheme(Prism) {\n  Prism.languages.scheme = {\n    comment: /;.*/,\n    string: {\n      pattern: /\"(?:[^\"\\\\]|\\\\.)*\"|'[^()#'\\s]+/,\n      greedy: true\n    },\n    character: {\n      pattern: /#\\\\(?:[ux][a-fA-F\\d]+|[a-zA-Z]+|\\S)/,\n      alias: 'string'\n    },\n    keyword: {\n      pattern: /(\\()(?:define(?:-syntax|-library|-values)?|(?:case-)?lambda|let(?:\\*|rec)?(?:-values)?|else|if|cond|begin|delay(?:-force)?|parameterize|guard|set!|(?:quasi-)?quote|syntax-rules)(?=[()\\s])/,\n      lookbehind: true\n    },\n    builtin: {\n      pattern: /(\\()(?:(?:cons|car|cdr|list|call-with-current-continuation|call\\/cc|append|abs|apply|eval)\\b|null\\?|pair\\?|boolean\\?|eof-object\\?|char\\?|procedure\\?|number\\?|port\\?|string\\?|vector\\?|symbol\\?|bytevector\\?)(?=[()\\s])/,\n      lookbehind: true\n    },\n    number: {\n      pattern: /([\\s()])[-+]?(?:\\d+\\/\\d+|\\d*\\.?\\d+(?:\\s*[-+]\\s*\\d*\\.?\\d+i)?)\\b/,\n      lookbehind: true\n    },\n    boolean: /#[tf]/,\n    operator: {\n      pattern: /(\\()(?:[-+*%\\/]|[<>]=?|=>?)(?=\\s|$)/,\n      lookbehind: true\n    },\n    function: {\n      pattern: /(\\()[^()'\\s]+(?=[()\\s)]|$)/,\n      lookbehind: true\n    },\n    punctuation: /[()']/\n  }\n}\n"]},"metadata":{},"sourceType":"script"}